Regular Expressions
Author: Michael Reed
Year: 2011

NOTE - This has not yet been well tested and is likely full of bugs.

This is source code for a regular expression library in C. At the moment it's just a side project, but I hope to make it good enough for other people to use should anyone want to. My engine uses the Thompson NFA model to represent a regex and match it against strings. It supports capture groups, bracketed character classes (no shortcuts yet), the standard quantifiers (+, *, ?), the '.' wildcard operator, and negation. Literals, character classes, and parentheticals of arbitrary complexity can all be negated. Negated parentheticals are zero-width. At present, the search algorithm for matches uses a breadth first search on the states of the nfa, whose depth is limited by the length of the string being searched. In the case of a negated parenthetical, there is a single recursion, which upon success causes the nfa to advance past the parenthetical without stepping through the string, and upon failure causes an immediate return from the calling stack frame. Though it uses recursion, my implementation of negated parentheticals avoids backtracking and further does not require the use of recursion to match normal parenthetical statements.
